name: Processar EPG com Offset Configurável

on:
  schedule:
    - cron: '0 4 * * *'  # 04:00 UTC = 05:00 Portugal
  workflow_dispatch:
    inputs:
      offset_seconds:
        description: 'Offset em segundos (pode ser negativo, ex: -30, +45)'
        required: false
        default: ''
        type: string
      update_default:
        description: 'Atualizar offset padrão permanentemente?'
        required: false
        default: false
        type: boolean

jobs:
  process-epg:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repositório
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Definir offset padrão (se solicitado)
        if: ${{ github.event.inputs.update_default == 'true' && github.event.inputs.offset_seconds != '' }}
        run: |
          echo "🔧 Definindo novo offset padrão: ${{ github.event.inputs.offset_seconds }}s"
          python processar.py --set-offset ${{ github.event.inputs.offset_seconds }}

      - name: Processar EPG
        run: |
          echo "🚀 Iniciando processamento EPG..."
          
          if [ "${{ github.event.inputs.offset_seconds }}" != "" ]; then
            echo "📱 Usando offset da App/Manual: ${{ github.event.inputs.offset_seconds }}s"
            python processar.py --offset ${{ github.event.inputs.offset_seconds }}
          else
            echo "⚙️ Usando offset da configuração padrão"
            python processar.py --config
          fi
          
          echo "✅ Processamento concluído"

      - name: Verificar ficheiros gerados
        run: |
          if [ ! -f "compilacao.xml.gz" ]; then
            echo "❌ Erro: compilacao.xml.gz não foi criado"
            exit 1
          fi
          
          echo "📊 Informações dos ficheiros gerados:"
          ls -lh compilacao.xml*
          
          # Mostrar configuração atual
          if [ -f "config.json" ]; then
            echo "⚙️ Configuração atual:"
            cat config.json | python -m json.tool
          fi
          
          echo "✅ Ficheiros criados com sucesso"

      - name: Preparar commit message
        id: commit_msg
        run: |
          # Determinar offset usado
          if [ "${{ github.event.inputs.offset_seconds }}" != "" ]; then
            OFFSET="${{ github.event.inputs.offset_seconds }}"
            SOURCE="App/Manual"
          else
            # Extrair offset do config.json se existir
            if [ -f "config.json" ]; then
              OFFSET=$(python -c "import json; print(json.load(open('config.json'))['offset_seconds'])")
              SOURCE="Config"
            else
              OFFSET="30"
              SOURCE="Padrão"
            fi
          fi
          
          # Criar mensagem de commit
          if [ "$OFFSET" -gt 0 ]; then
            OFFSET_STR="+${OFFSET}s"
          else
            OFFSET_STR="${OFFSET}s"
          fi
          
          COMMIT_MSG="EPG atualizado (${OFFSET_STR}) - $(date '+%Y-%m-%d %H:%M UTC') [${SOURCE}]"
          echo "commit_message=${COMMIT_MSG}" >> $GITHUB_OUTPUT
          echo "offset_used=${OFFSET}" >> $GITHUB_OUTPUT

      - name: Commit e Push (apenas se houver mudanças)
        run: |
          git config --local user.name 'xmltune-bot[bot]'
          git config --local user.email 'xmltune-bot@users.noreply.github.com'

          # Adicionar ficheiros gerados
          git add compilacao.xml compilacao.xml.gz
          
          # Adicionar config.json se foi modificado
          if [ -f "config.json" ]; then
            git add config.json
          fi
          
          # Verificar se há alterações
          if git diff --cached --quiet; then
            echo "📝 Sem alterações nos ficheiros - fonte não foi atualizada"
            exit 0
          fi

          echo "📝 Alterações detetadas - a fazer commit..."
          echo "💬 Mensagem: ${{ steps.commit_msg.outputs.commit_message }}"
          git commit -m "${{ steps.commit_msg.outputs.commit_message }}"
          
          # Push com retry
          for attempt in {1..3}; do
            if git push; then
              echo "✅ Push bem-sucedido na tentativa $attempt"
              echo "🎯 Offset aplicado: ${{ steps.commit_msg.outputs.offset_used }}s"
              break
            else
              echo "⚠️ Push falhou na tentativa $attempt"
              if [ $attempt -lt 3 ]; then
                echo "🔄 A tentar novamente em 10 segundos..."
                sleep 10
                git pull --rebase origin main
              else
                echo "❌ Falha definitiva no push após 3 tentativas"
                exit 1
              fi
            fi
          done

      - name: Resumo da execução
        if: always()
        run: |
          echo "## 📋 Resumo da Execução" >> $GITHUB_STEP_SUMMARY
          echo "**Offset aplicado:** ${{ steps.commit_msg.outputs.offset_used }}s" >> $GITHUB_STEP_SUMMARY
          echo "**Data/Hora:** $(date '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "compilacao.xml.gz" ]; then
            SIZE=$(ls -lh compilacao.xml.gz | awk '{print $5}')
            echo "**Ficheiro gerado:** compilacao.xml.gz (${SIZE})" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Status:** Sucesso" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Falha" >> $GITHUB_STEP_SUMMARY
          fi
