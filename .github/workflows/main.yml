name: EPG Processor - Sistema Automatizado

on:
  schedule:
    # Executa a cada 6 horas
    - cron: '0 */6 * * *'
  
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Forçar atualização ignorando cache'
        required: false
        default: 'false'
        type: boolean
      
      debug_mode:
        description: 'Ativar modo debug'
        required: false
        default: 'false'
        type: boolean
      
      custom_offset:
        description: 'Offset personalizado em segundos'
        required: false
        default: '30'
        type: string
  
  push:
    branches: [ main, develop ]
    paths:
      - 'processar.py'
      - 'config.json'
      - 'requirements.txt'
      - '.github/workflows/main.yml'

env:
  PYTHON_VERSION: '3.11'
  CACHE_VERSION: 'v2'

jobs:
  validate-config:
    name: Validar Configuração
    runs-on: ubuntu-latest
    outputs:
      config-valid: ${{ steps.validate.outputs.valid }}
      
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Validar config.json
        id: validate
        run: |
          python -c "
          import json
          import sys
          
          try:
              with open('config.json', 'r') as f:
                  config = json.load(f)
              
              # Validações obrigatórias
              required_fields = ['source_url', 'offset_seconds', 'app_version']
              for field in required_fields:
                  if field not in config:
                      print(f'Campo obrigatório ausente: {field}')
                      sys.exit(1)
              
              # Validações de tipo
              if not isinstance(config['offset_seconds'], int):
                  print('offset_seconds deve ser um número inteiro')
                  sys.exit(1)
              
              if not config['source_url'].startswith('http'):
                  print('source_url deve ser uma URL válida')
                  sys.exit(1)
              
              print('Configuração válida')
              print('valid=true' >> os.environ['GITHUB_OUTPUT'])
              
          except Exception as e:
              print(f'Erro na validação: {e}')
              sys.exit(1)
          "

  process-epg:
    name: Processar EPG
    runs-on: ubuntu-latest
    needs: validate-config
    if: needs.validate-config.outputs.config-valid == 'true'
    
    strategy:
      matrix:
        include:
          - name: "Principal"
            config: "config.json"
            output: "epg_timeshift.xml"
          
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
          
      - name: Cache de dependências
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-pip-
            
      - name: Cache EPG
        uses: actions/cache@v4
        with:
          path: |
            temp_epg.xml.gz
            temp_epg.xml.gz.cache
          key: epg-cache-${{ env.CACHE_VERSION }}-${{ github.run_number }}
          restore-keys: |
            epg-cache-${{ env.CACHE_VERSION }}-
            epg-cache-
            
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Verificar versões
        run: |
          echo "Python: $(python --version)"
          echo "Pip: $(pip --version)"
          pip list
          
      - name: Configurar modo debug
        if: ${{ github.event.inputs.debug_mode == 'true' }}
        run: |
          echo "DEBUG_MODE=true" >> $GITHUB_ENV
          echo "Modo debug ativado"
          
      - name: Configurar offset personalizado
        if: ${{ github.event.inputs.custom_offset != '' }}
        run: |
          python -c "
          import json
          
          # Carrega configuração atual
          with open('config.json', 'r') as f:
              config = json.load(f)
          
          # Atualiza offset
          config['offset_seconds'] = int('${{ github.event.inputs.custom_offset }}')
          
          # Salva configuração
          with open('config.json', 'w') as f:
              json.dump(config, f, indent=2)
          
          print(f'Offset personalizado configurado: ${{ github.event.inputs.custom_offset }}s')
          "
          
      - name: Limpar cache (se forçado)
        if: ${{ github.event.inputs.force_update == 'true' }}
        run: |
          rm -f temp_epg.xml.gz temp_epg.xml.gz.cache
          echo "Cache limpo - forçando nova descarga"
          
      - name: Processar EPG
        id: process
        run: |
          echo "Iniciando processamento EPG..."
          
          # Configurar timeout
          timeout 1800 python processar.py || {
            echo "Processamento falhou ou excedeu timeout"
            exit 1
          }
          
          # Verificar se o arquivo foi criado
          if [ -f "epg_timeshift.xml" ] || [ -f "epg_timeshift.xml.gz" ]; then
            echo "EPG processado com sucesso"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "Falha: arquivo de saída não encontrado"
            exit 1
          fi
          
      - name: Gerar estatísticas
        if: steps.process.outputs.success == 'true'
        run: |
          echo "Gerando estatísticas..."
          python processar.py --stats > stats.json
          
          # Exibir estatísticas
          echo "=== ESTATÍSTICAS DO PROCESSAMENTO ==="
          cat stats.json
          
          # Verificar tamanho do arquivo
          if [ -f "epg_timeshift.xml.gz" ]; then
            FILE_SIZE=$(stat -c%s epg_timeshift.xml.gz)
            echo "Tamanho do arquivo: $FILE_SIZE bytes"
          elif [ -f "epg_timeshift.xml" ]; then
            FILE_SIZE=$(stat -c%s epg_timeshift.xml)
            echo "Tamanho do arquivo: $FILE_SIZE bytes"
          fi
          
      - name: Validar arquivo de saída
        if: steps.process.outputs.success == 'true'
        run: |
          echo "Validando arquivo de saída..."
          
          # Determinar arquivo a validar
          if [ -f "epg_timeshift.xml.gz" ]; then
            echo "Validando arquivo comprimido..."
            gunzip -t epg_timeshift.xml.gz
            OUTPUT_FILE="epg_timeshift.xml.gz"
          elif [ -f "epg_timeshift.xml" ]; then
            echo "Validando arquivo XML..."
            python -c "
            from lxml import etree
            try:
                tree = etree.parse('epg_timeshift.xml')
                root = tree.getroot()
                channels = len(root.findall('channel'))
                programmes = len(root.findall('programme'))
                print(f'XML válido: {channels} canais, {programmes} programas')
            except Exception as e:
                print(f'Erro na validação: {e}')
                exit(1)
            "
            OUTPUT_FILE="epg_timeshift.xml"
          else
            echo "Arquivo de saída não encontrado"
            exit 1
          fi
          
          echo "OUTPUT_FILE=$OUTPUT_FILE" >> $GITHUB_ENV
          
      - name: Criar release
        if: steps.process.outputs.success == 'true' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "epg-${{ github.run_number }}"
          name: "EPG Timeshift - ${{ github.run_number }}"
          body: |
            ## EPG Processado Automaticamente
            
            **Data:** ${{ github.event.head_commit.timestamp }}
            **Commit:** ${{ github.sha }}
            **Executado por:** ${{ github.actor }}
            
            ### Estatísticas
            ```json
            $(cat stats.json)
            ```
            
            ### Arquivos incluídos
            - ${{ env.OUTPUT_FILE }} - EPG com timeshift aplicado
            - stats.json - Estatísticas do processamento
            - epg_processor.log - Log detalhado
            
          files: |
            ${{ env.OUTPUT_FILE }}
            stats.json
            epg_processor.log
          draft: false
          prerelease: false
          
      - name: Upload dos artefatos
        if: steps.process.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: epg-processed-${{ github.run_number }}
          path: |
            ${{ env.OUTPUT_FILE }}
            stats.json
            epg_processor.log
            config.json
          retention-days: 30
          
      - name: Atualizar último commit
        if: steps.process.outputs.success == 'true' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Atualizar timestamp no config.json
          python -c "
          import json
          from datetime import datetime
          
          with open('config.json', 'r') as f:
              config = json.load(f)
          
          config['last_update'] = datetime.now().isoformat()
          
          with open('config.json', 'w') as f:
              json.dump(config, f, indent=2)
          "
          
          git add config.json
          git commit -m "Atualização automática EPG - $(date)" || echo "Nenhuma alteração para commit"
          git push
          
      - name: Notificar falha
        if: failure()
        run: |
          echo "❌ Processamento EPG falhou"
          echo "Verifique os logs para mais detalhes"
          
          # Salvar log de erro
          if [ -f epg_processor.log ]; then
            echo "=== LOG DE ERRO ==="
            tail -50 epg_processor.log
          fi
          
          # Criar issue automático em caso de falha
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "Falha no processamento automático - considere verificar a configuração"
          fi

  cleanup:
    name: Limpeza
    runs-on: ubuntu-latest
    needs: [validate-config, process-epg]
    if: always()
    
    steps:
      - name: Limpar artefatos antigos
        uses: geekyeggo/delete-artifact@v5
        with:
          name: epg-processed-*
          useGlob: true
          failOnError: false
          
      - name: Limpar releases antigas
        if: github.ref == 'refs/heads/main'
        uses: dev-drprasad/delete-older-releases@v0.3.2
        with:
          keep_latest: 10
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notificação
    runs-on: ubuntu-latest
    needs: [process-epg]
    if: always()
    
    steps:
      - name: Notificar sucesso
        if: needs.process-epg.result == 'success'
        run: |
          echo "✅ EPG processado com sucesso!"
          echo "Arquivo disponível nos artefatos e release"
          
      - name: Notificar falha
        if: needs.process-epg.result == 'failure'
        run: |
          echo "❌ Falha no processamento do EPG"
          echo "Verifique os logs para diagnóstico"
