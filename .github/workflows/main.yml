# .github/workflows/main.yml
name: EPG Update Workflow

on:
  workflow_dispatch:
    inputs:
      offset_seconds:
        description: 'Offset em segundos (+/-)'
        required: false
        default: '0'
        type: string
      update_default:
        description: 'Atualizar configuração padrão'
        required: false
        default: false
        type: boolean
  schedule:
    - cron: '0 */4 * * *'  # A cada 4 horas

jobs:
  update-epg:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout do repositório
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch completo do histórico
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: ⚙️ Configurar Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "github-actions[bot]"
        git config --local pull.rebase false  # Usar merge em vez de rebase
    
    - name: 🔄 Sincronizar com remote (com retry)
      run: |
        echo "🔄 A sincronizar com o repositório remoto..."
        
        # Função de retry
        retry_pull() {
          local max_attempts=5
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "🔄 Tentativa $attempt de $max_attempts..."
            
            # Stash qualquer mudança local
            git stash push -m "Auto-stash before pull" || true
            
            # Pull das mudanças remotas
            if git pull origin main --no-edit; then
              echo "✅ Pull realizado com sucesso!"
              
              # Restaurar stash se existir
              if git stash list | grep -q "Auto-stash before pull"; then
                git stash pop || echo "⚠️ Aviso: Não foi possível restaurar stash"
              fi
              
              return 0
            else
              echo "⚠️ Pull falhou na tentativa $attempt"
              sleep $((attempt * 5))  # Esperar mais tempo a cada tentativa
              attempt=$((attempt + 1))
            fi
          done
          
          echo "❌ Falha ao sincronizar após $max_attempts tentativas"
          return 1
        }
        
        retry_pull
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: 📦 Instalar dependências
      run: |
        python -m pip install --upgrade pip
        # Adicionar as tuas dependências aqui
        # pip install -r requirements.txt
    
    - name: 🎯 Processar EPG
      run: |
        echo "🎯 A processar EPG com offset: ${{ github.event.inputs.offset_seconds || '0' }}s"
        
        # O teu script de processamento aqui
        # python process_epg.py --offset=${{ github.event.inputs.offset_seconds || '0' }}
        
        # Para demonstração, criar um ficheiro de teste
        echo "EPG processado em $(date) com offset ${{ github.event.inputs.offset_seconds || '0' }}s" > epg_update.log
    
    - name: 💾 Commit e Push (com proteção contra conflitos)
      run: |
        echo "💾 A verificar alterações..."
        
        # Verificar se há alterações
        if git diff --quiet && git diff --staged --quiet; then
          echo "ℹ️ Nenhuma alteração detetada - a saltar commit"
          exit 0
        fi
        
        echo "📝 Alterações detetadas - a preparar commit..."
        
        # Função para commit com retry
        safe_commit_push() {
          local max_attempts=3
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "📝 Tentativa de commit e push $attempt de $max_attempts..."
            
            # Sincronizar novamente antes do commit
            git stash push -m "Pre-commit stash" || true
            
            if git pull origin main --no-edit; then
              # Restaurar stash
              if git stash list | grep -q "Pre-commit stash"; then
                if ! git stash pop; then
                  echo "⚠️ Conflito no stash - a resolver automaticamente"
                  git reset --hard HEAD
                  git stash drop || true
                fi
              fi
              
              # Adicionar alterações
              git add .
              
              # Commit se há alterações
              if ! git diff --staged --quiet; then
                git commit -m "EPG atualizado - $(date -u '+%Y-%m-%d %H:%M') UTC
                
                Offset aplicado: ${{ github.event.inputs.offset_seconds || '0' }}s
                Workflow: ${{ github.run_id }}
                Triggered by: ${{ github.event_name }}"
                
                # Push com retry
                if git push origin main; then
                  echo "✅ Push realizado com sucesso!"
                  return 0
                else
                  echo "⚠️ Push falhou na tentativa $attempt"
                fi
              else
                echo "ℹ️ Nenhuma alteração para commit após merge"
                return 0
              fi
            else
              echo "⚠️ Pull falhou na tentativa $attempt"
            fi
            
            attempt=$((attempt + 1))
            sleep $((attempt * 3))
          done
          
          echo "❌ Falha no commit/push após $max_attempts tentativas"
          return 1
        }
        
        safe_commit_push
    
    - name: 📊 Atualizar configuração padrão
      if: ${{ github.event.inputs.update_default == 'true' }}
      run: |
        echo "📊 A atualizar configuração padrão..."
        
        # Criar/atualizar config.json
        cat > config.json << EOF
        {
          "default_offset": ${{ github.event.inputs.offset_seconds || '0' }},
          "last_updated": "$(date -u -Iseconds)",
          "updated_by": "github-actions[bot]",
          "workflow_run": "${{ github.run_id }}"
        }
        EOF
        
        # Commit da configuração
        git add config.json
        if ! git diff --staged --quiet; then
          git commit -m "Configuração padrão atualizada - offset: ${{ github.event.inputs.offset_seconds || '0' }}s"
          git push origin main || echo "⚠️ Aviso: Push da configuração falhou"
        fi
    
    - name: 📢 Notificação de sucesso
      if: success()
      run: |
        echo "🎉 Workflow concluído com sucesso!"
        echo "⏰ Offset aplicado: ${{ github.event.inputs.offset_seconds || '0' }}s"
        echo "🕐 Timestamp: $(date -u)"
        echo "🔗 Run ID: ${{ github.run_id }}"
    
    - name: 📢 Notificação de erro
      if: failure()
      run: |
        echo "❌ Workflow falhou!"
        echo "🔍 Verificar logs para mais detalhes"
        echo "🔗 Run ID: ${{ github.run_id }}"
